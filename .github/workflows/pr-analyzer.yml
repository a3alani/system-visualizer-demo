name: System Visualizer PR Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'app/**'
      - 'lib/**'

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: false
    
    - name: Create output directory
      run: mkdir -p docs/system-diagrams
    
    - name: Execute System Visualizer - Full Analysis
      run: |
        chmod +x bin/system_visualizer
        echo "🔍 Running full codebase analysis..."
        ./bin/system_visualizer analyze || echo "Full analysis failed, continuing with PR analysis..."
      continue-on-error: true
    
    - name: Execute System Visualizer - PR Analysis
      id: pr_analysis
      run: |
        echo "🔍 Running PR impact analysis..."
        ./bin/system_visualizer pr ${{ github.event.pull_request.base.ref }}
        echo "analysis_completed=true" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: List generated diagrams
      run: |
        echo "📊 Generated diagram files:"
        ls -la docs/system-diagrams/ || echo "No diagrams directory found"
        if [ -d "docs/system-diagrams" ]; then
          for file in docs/system-diagrams/*.md; do
            if [ -f "$file" ]; then
              echo "📄 Found: $(basename "$file") ($(wc -l < "$file") lines)"
            fi
          done
        fi
    
    - name: Upload diagrams as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: system-diagrams-pr-${{ github.event.number }}
        path: docs/system-diagrams/
        retention-days: 30
    
    - name: Create comprehensive PR comment
      uses: actions/github-script@v7
      if: steps.pr_analysis.outputs.analysis_completed == 'true'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🔍 System Visualizer Analysis\n\n';
          comment += '_Automated analysis of your PR changes and their impact on the codebase architecture._\n\n';
          
          const diagramsDir = 'docs/system-diagrams';
          const diagramFiles = [
            { file: 'pr-changes.md', title: '📋 PR Impact Analysis', description: 'Shows the specific impact of changes in this PR' },
            { file: 'overview.md', title: '🏗️ Architecture Overview', description: 'High-level view of the application architecture' },
            { file: 'dependency-analysis.md', title: '🔗 Dependency Analysis', description: 'Analysis of component dependencies and complexity' },
            { file: 'circular-dependency-analysis.md', title: '🔄 Circular Dependencies', description: 'Detection of circular dependencies and complexity hotspots' }
          ];
          
          let hasAnyDiagram = false;
          
          for (const { file, title, description } of diagramFiles) {
            const filePath = path.join(diagramsDir, file);
            if (fs.existsSync(filePath)) {
              try {
                const diagram = fs.readFileSync(filePath, 'utf8').trim();
                if (diagram.length > 0) {
                  hasAnyDiagram = true;
                  comment += `### ${title}\n`;
                  comment += `_${description}_\n\n`;
                  comment += '```mermaid\n';
                  comment += diagram;
                  comment += '\n```\n\n';
                  comment += '---\n\n';
                }
              } catch (error) {
                console.log(`Error reading ${file}:`, error.message);
              }
            }
          }
          
          if (!hasAnyDiagram) {
            comment += '### ℹ️ No Significant Changes Detected\n\n';
            comment += 'This PR doesn\'t appear to modify core application files (models, controllers, services, workers) that would impact the architecture diagram.\n\n';
          }
          
          comment += '### 📊 Additional Information\n\n';
          comment += '- **Full analysis artifacts** are available in the workflow run\n';
          comment += '- **Interactive diagrams** can be viewed by copying the Mermaid code to [mermaid.live](https://mermaid.live/)\n';
          comment += '- **Analysis covers**: Models, Controllers, Services, Workers, and their dependencies\n\n';
          comment += '<details>\n<summary>🔧 How to interpret these diagrams</summary>\n\n';
          comment += '- **🔴 Red components**: High complexity or high impact\n';
          comment += '- **🟡 Yellow components**: Medium complexity or medium impact\n';
          comment += '- **🟢 Green components**: Low complexity or low impact\n';
          comment += '- **Solid arrows**: Direct dependencies\n';
          comment += '- **Dashed arrows**: Indirect or service dependencies\n';
          comment += '</details>\n\n';
          comment += '_Generated by System Visualizer v1.0 🤖_';
          
          // Check if there's already a comment from the bot
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('System Visualizer Analysis')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
            console.log('Updated existing System Visualizer comment');
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            console.log('Created new System Visualizer comment');
          }
    
    - name: Summary
      if: always()
      run: |
        echo "🎉 System Visualizer Analysis Complete!"
        echo "✅ Diagrams uploaded as artifacts"
        echo "✅ PR comment posted with analysis"
        echo "📊 View artifacts in the Actions tab for detailed diagrams"
